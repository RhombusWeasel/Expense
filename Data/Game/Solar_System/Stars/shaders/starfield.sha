//extern number iGlobalTime;
extern number iMapPosX;
extern number iMapPosY;
extern number iResolutionX;
extern number iResolutionY;
extern number iScale;

float Hash( float n )
{
	return fract( (1.0 + sin(n)) * 415.92653);
}

float Noise2d( in vec2 x )
{
    float xhash = Hash( x.x * 37.0 );
    float yhash = Hash( x.y * 57.0 );
    return fract( xhash + yhash );
}

float map(float value, float istart, float istop, float ostart, float ostop) {
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
}

vec4 effect( vec4 fragColor, Image texture, vec2 uv, vec2 fragCoord )
{	
    vec2 iResolution    = vec2(iResolutionX, iResolutionY);
    vec2 vCameraOffset  = vec2(floor((iMapPosX / 5000) - (iResolutionX / 2)), floor((iMapPosY / 5000) - (iResolutionY / 2)));
    vec2 vSamplePos     = ( fragCoord.xy + floor( vCameraOffset ) ) / iResolution.xy;

    vec3 vColor  = vec3(0.0, 0.0, 0.0);

    float fThreshhold = map(iScale, 5, 1, 0.9995, 0.99);
    float StarVal = Noise2d( vSamplePos );
    if ( StarVal >= fThreshhold )
    {
        StarVal = pow( (StarVal - fThreshhold) / (1.0 - fThreshhold), 6.0 );
        vColor += vec3( 0.0, 0.1, 0.0 ) * StarVal;
        vColor += vec3( StarVal );
    }
	
	fragColor = vec4(vColor, 1.0);
  return fragColor;
}
